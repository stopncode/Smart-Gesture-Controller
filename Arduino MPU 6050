

Website: http://eeenthusiast.com/
Youtube: https://www.youtube.com/EEEnthusiast
Facebook: https://www.facebook.com/EEEnthusiast/
Patreon: https://www.patreon.com/EE_Enthusiast
Revision: 1.0 (July 13th, 2016)
===Hardware===
- Arduino Uno R3
- MPU-6050 (Available from: http://eeenthusiast.com/product/6dof-mpu-6050-accelerometer-gyroscope-temperature/)
===Software===
- Latest Software: https://github.com/VRomanov89/EEEnthusiast/tree/master/MPU-6050%20Implementation/MPU6050_Implementation
- Arduino IDE v1.6.9
- Arduino Wire library
===Terms of use===
The software is provided by EEEnthusiast without warranty of any kind. In no event shall the authors or
copyright holders be liable for any claim, damages or other liability, whether in an action of contract,
tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in
the software.
*/

\* Minor changes have been made to original source Code */

#include<Wire.h>   // library used for IIC
long accelX, accelY, accelZ;
float gForceX, gForceY, gForceZ;

long gyroX, gyroY, gyroZ;
float rotX, rotY, rotZ;
//check
void setup()
{
  Serial.begin(9600); // Initiate serial communication with a Baud rate to 9600
Serial.print("Starting Program....."); //
Wire.begin(); //Initiate the Wire library and join the I2C bus as a
              //master or slave. This should normally be called only once.
              // Create Wire Object

setupMPU();   //call function for MPU6050
}

void loop()
{
  //Serial.print("Starting Prgram");
  recordAccelRegisters();
  recordGyroRegisters();
  printData();
  delay(100);

}
//This code accesses the slave device location and sets configurations check
void setupMPU()
{
Wire.beginTransmission(0x68);   // start bit, address of slave device, start talking to device
                                // Parameter address: the 7-bit address of the device to transmit to
Wire.write(6B);                 // PWr MGMT (the function sets write bit and address of register)
Wire.Write(7);                  // reset to default values; Bit 7
Wire.endTransmission();
Serial.print("Finished setup.....");  //

}


void recordAccelRegisters()
{
  //Serial.print("Recording Accelerometer registers...      ");
Wire.beginTransmission(0x68);        // Call device with address
Wire.write(0x3B);                    // Set Pointer to address of register you want to communicate with
Wire.endTransmission();              //
Wire.requestFrom(0x68,6);            // request Accel register (3B-40) Hex address. arguments includes address of the slave and however many bytes to request
while(Wire.available() <= 6);        // wire.available returns the number of bytes availble
accelX = Wire.read()<<8|Wire.read(); // store first two bytes OR. shifts 2, 8 bits into 16 bit variable
accelY = Wire.read()<<8|Wire.read(); // store middle two bytes
accelZ = Wire.read()<<8|Wire.read(); // store last two bytes
processAccelData();                  //
Serial.print("\t");
Serial.print("Finished...     ");
Serial.print("\t");

}

void processAccelData()
{
  //Serial.print("Processing Accel Data...      ");
 gForceX= accelX / 16384.0;
 gForceY= accelY / 16384.0;
 gForceZ= accelZ / 16384.0;
//Serial.print("Donzo     ");
}

void recordGyroRegisters()
{
  //Serial.print("recording Gyro data ");
Wire.beginTransmission(0x68);
Wire.write(0x43);                   //starting register for gyro reading
Wire.endTransmission();
Wire.requestFrom(0x68,6);//request Gyro register (43 - 48) Hex address
while(Wire.available() <= 6);        // returns the number of bytes available with read
gyroX = Wire.read()<<8|Wire.read(); //store first two bytes
gyroY = Wire.read()<<8|Wire.read(); //store middle two bytes
gyroZ = Wire.read()<<8|Wire.read(); //store last two bytes
//Serial.print("Done        ");
processGyroData();

}


void processGyroData()
{
  //Serial.print("processing gryo data..");
rotX = gyroX / 131.0;
rotY = gyroY / 131.0;
rotZ =gyroZ /  131.0;
//Serial.print("done.    ");
}

void printData()
{
 Serial.print("Gyro (deg)"); //string with qoutes
 Serial.print(" x= ");  // print string
 Serial.print(rotX);
 Serial.print(" Y= ");
 Serial.print(rotY);
 Serial.print (" Z ");
 Serial.print(rotZ);
 Serial.print("Accel (g)");
 Serial.print(" X= ");
 Serial.print(gForceX);
 Serial.print(" Y=");
 Serial.print(gForceY);
 Serial.print(" Z= ");
 Serial.print(gForceZ);
 Serial.print("\t");
 Serial.println();
}
